services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: feedback_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: feedback_system
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - feedback_network

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: feedback_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - feedback_network

  # NLP Service (Python FastAPI)
  nlp-service:
    build:
      context: ./backend/services
      dockerfile: Dockerfile
    container_name: feedback_nlp
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
    volumes:
      - ./backend/services:/app
      - nlp_models:/app/models
    depends_on:
      - redis
    networks:
      - feedback_network

  # Backend API (Node.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: feedback_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/feedback_system?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRE=7d
      - NLP_SERVICE_URL=http://nlp-service:8000
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
      - nlp-service
    networks:
      - feedback_network

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: feedback_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_SERVER_URL=http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - feedback_network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: feedback_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - feedback_network

  # MongoDB Admin Interface (Optional)
  mongo-express:
    image: mongo-express:latest
    container_name: feedback_mongo_express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/?authSource=admin
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - feedback_network

  # Redis Admin Interface (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: feedback_redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - feedback_network

# Named volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  nlp_models:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  feedback_network:
    driver: bridge
